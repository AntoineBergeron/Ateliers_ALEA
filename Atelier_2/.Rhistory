library(effects) #SS et J-N
library(huxtable) #SS et J-N
library(interactionTest) #SS et J-N
library(sandwich)  #####Pour appliquer la fonction sim_slopes
library(broom)  #J-N
library(ggstance)  #J-N
library(broom.mixed) #J-N
library(survey)  ####Accès à quelques bases de données
library(cowplot) ####Seulement nécessaire si 2 modérateurs
install.packages("emmeans")
library(emmeans)
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
plot(result1)
plot(result2)
plot_summs(result1)
library(jtools)#Pour pouvoir faire summ()
library(effects) #SS et J-N
library(huxtable) #SS et J-N
library(interactionTest) #SS et J-N
library(sandwich)  #####Pour appliquer la fonction sim_slopes
library(broom)  #J-N
library(ggstance)  #J-N
library(broom.mixed) #J-N
library(survey)  ####Accès à quelques bases de données
library(cowplot) ####Seulement nécessaire si 2 modérateurs
states <- as.data.frame(state.x77) #création de mon tableau de données
fiti <- lm(Income ~ Illiteracy * Murder + `HS Grad`, data = states) #Utilisation de lm() pour fit un modèle linéaire
summ(fiti) #Sommaire de notre modèle linéaire
result1 <- sim_slopes(fiti, pred = Illiteracy, modx = Murder, johnson_neyman = FALSE) ###variable X, variable Z, Non-Application de J-N
result1
result2 <- sim_slopes(fiti, pred = Illiteracy, modx = Murder, modx.values = c(0,1,5,8,12), johnson_neyman = FALSE)
result2
plot(result1)
plot(result2)
result1 <- sim_slopes(fiti, pred = Illiteracy, modx = Murder, johnson_neyman = FALSE) ###variable X, variable Z, Non-Application de J-N
library(interactions)
result1 <- sim_slopes(fiti, pred = Illiteracy, modx = Murder, johnson_neyman = FALSE) ###variable X, variable Z, Non-Application de J-N
result1
result2 <- sim_slopes(fiti, pred = Illiteracy, modx = Murder, modx.values = c(0,1,5,8,12), johnson_neyman = FALSE)
result2
plot(result1)
plot(result2)
plot_summs(result1)
plot_summs(result1, result2)
View(result1)
$result1
result1$
####Peut ajouter la valeur du alpha voulu: alpha = .01 par exemple
####Seule la première phrase nous intéresse (When Murder is OUTSIDE the interval...)
####On peut choisir le range du modérateur avec mod.range = c(0,10) par exemple.
##################################
#################################
##################################
#################################
#################################
###TEST avec valeurs aléatoires
Z <- 9*runif(50,0.5)
result1
result1$slopes
result1$slopes[1]
result1$slopes[2,1]
result1$slopes[1,2]
mean(Murder)
Murder
states
mean(states[,5])
states[,5]
sd(states[,5])
u <- mean(states[,5])
ET <- sd(states[,5])
plot(u - ET)
fiti <- lm(Income ~ Illiteracy * Murder + `HS Grad`, data = states) #Utilisation de lm() pour fit un modèle linéaire
summ(fiti) #Sommaire de notre modèle linéaire
fiti$coefficients
fiti$coefficients[,1]
fiti$coefficients[1]
fiti$coefficients[1]*2
fiti <- lm(Income ~ Illiteracy * Murder, data = states) #Utilisation de lm() pour fit un modèle linéaire
summ(fiti) #Sommaire de notre modèle linéaire
fiti$coefficients[1] + fiti$coefficients[2]*X + fiti$coefficients[3]*(u-ET) + fiti$coefficients[4]*(u-ET)*X
plot(fiti$coefficients[1] + fiti$coefficients[2]*x + fiti$coefficients[3]*(u-ET) + fiti$coefficients[4]*(u-ET)*x)
plot.function(fiti$coefficients[1] + fiti$coefficients[2]*x + fiti$coefficients[3]*(u-ET) + fiti$coefficients[4]*(u-ET)*x)
states <- as.data.frame(state.x77) #création de mon tableau de données
fiti <- lm(Income ~ Illiteracy * Murder, data = states) #Utilisation de lm() pour fit un modèle linéaire
summ(fiti) #Sommaire de notre modèle linéaire
result1 <- sim_slopes(fiti, pred = Illiteracy, modx = Murder, johnson_neyman = FALSE) ###variable X, variable Z, Non-Application de J-N
result1
result2 <- sim_slopes(fiti, pred = Illiteracy, modx = Murder, modx.values = c(0,1,5,8,12), johnson_neyman = FALSE)
result2
plot(result1)
plot(result2)
plot_summs(result1, result2)
result3 <- sim_slopes(fiti, pred = Illiteracy, modx = Murder, johnson_neyman = TRUE) ###variable X, variable Z, Application de J-N
result3
result4 <- johnson_neyman(fiti, Illiteracy, modx = Murder, mod.range = c(-5,25))
result4
function(x) = 2x
function(x) {2x}
f <- function(x)
f <- function(x)
{
fiti$coefficients[1] + fiti$coefficients[2]*x + fiti$coefficients[3]*(u-ET) + fiti$coefficients[4]*(u-ET)*x
}
plot.function(f)
plot.function(f, from = 1, to = 5, 100)
plot.function(f, from = 1, to = 5, n =100)
View(f)
curve(fiti$coefficients[1] + fiti$coefficients[2]*x + fiti$coefficients[3]*(u-ET) + fiti$coefficients[4]*(u-ET)*x)
u <- mean(states[,5])
ET <- sd(states[,5])
curve(fiti$coefficients[1] + fiti$coefficients[2]*x + fiti$coefficients[3]*(u-ET) + fiti$coefficients[4]*(u-ET)*x)
curve(fiti$coefficients[1] + fiti$coefficients[2]*x + fiti$coefficients[3]*(u) + fiti$coefficients[4]*(u)*x)
curve(fiti$coefficients[1] + fiti$coefficients[2]*x + fiti$coefficients[3]*(u+ET) + fiti$coefficients[4]*(u+ET)*x)
par(mfrow = c(3,3))
curve(fiti$coefficients[1] + fiti$coefficients[2]*x + fiti$coefficients[3]*(u-ET) + fiti$coefficients[4]*(u-ET)*x)
curve(fiti$coefficients[1] + fiti$coefficients[2]*x + fiti$coefficients[3]*(u) + fiti$coefficients[4]*(u)*x)
curve(fiti$coefficients[1] + fiti$coefficients[2]*x + fiti$coefficients[3]*(u+ET) + fiti$coefficients[4]*(u+ET)*x)
curve(fiti$coefficients[1] + fiti$coefficients[2]*x + fiti$coefficients[3]*(u-ET) + fiti$coefficients[4]*(u-ET)*x)
lines(fiti$coefficients[1] + fiti$coefficients[2]*x + fiti$coefficients[3]*(u) + fiti$coefficients[4]*(u)*x)
x <- seq(0,5,0.2)
curve(fiti$coefficients[1] + fiti$coefficients[2]*x + fiti$coefficients[3]*(u-ET) + fiti$coefficients[4]*(u-ET)*x)
lines(fiti$coefficients[1] + fiti$coefficients[2]*x + fiti$coefficients[3]*(u) + fiti$coefficients[4]*(u)*x)
lines(fiti$coefficients[1] + fiti$coefficients[2]*x + fiti$coefficients[3]*(u+ET) + fiti$coefficients[4]*(u+ET)*x)
eq1 <- fiti$coefficients[1] + fiti$coefficients[2]*x + fiti$coefficients[3]*(u-ET) + fiti$coefficients[4]*(u-ET)*x
eq2 <- fiti$coefficients[1] + fiti$coefficients[2]*x + fiti$coefficients[3]*(u) + fiti$coefficients[4]*(u)*x
eq3 <- fiti$coefficients[1] + fiti$coefficients[2]*x + fiti$coefficients[3]*(u+ET) + fiti$coefficients[4]*(u+ET)*x
x <- seq(0,5,0.1)
eq1 <- fiti$coefficients[1] + fiti$coefficients[2]*x + fiti$coefficients[3]*(u-ET) + fiti$coefficients[4]*(u-ET)*x
eq2 <- fiti$coefficients[1] + fiti$coefficients[2]*x + fiti$coefficients[3]*(u) + fiti$coefficients[4]*(u)*x
eq3 <- fiti$coefficients[1] + fiti$coefficients[2]*x + fiti$coefficients[3]*(u+ET) + fiti$coefficients[4]*(u+ET)*x
plot(eq1,eq2,eq3)
curve(eq1,eq2,eq3)
eq1 <- fiti$coefficients[1] + fiti$coefficients[2]*x + fiti$coefficients[3]*(u-ET) + fiti$coefficients[4]*(u-ET)*x
eq2 <- fiti$coefficients[1] + fiti$coefficients[2]*x + fiti$coefficients[3]*(u) + fiti$coefficients[4]*(u)*x
eq3 <- fiti$coefficients[1] + fiti$coefficients[2]*x + fiti$coefficients[3]*(u+ET) + fiti$coefficients[4]*(u+ET)*x
curve(eq1,eq2,eq3)
plot(x,eq1)
lines(x,eq2)
lines(x,eq1)
library(ggplot)
install.packages("ggplot2")
install.packages("ggplot2")
detach("package:base", unload = TRUE)
library(base, lib.loc = "C:/Program Files/R/R-3.6.1/library")
x <- 4 - 2*y
y <- 1
y <- 1
x <- 4 - 2*y
x
y
$x
c(x,y)
x. y
x, y
W <- 4
Z = W^(3/2) + 1,7
W <- 4
Z = W^(3/2) + 1.7
W
Z
W = 4
Z = W^(3/2) + 1.7
W
Z
nhlcanad = read.table(file.choose(), header = TRUE, sep = "\t")
head(nhlcanad)
nhlcanad1 = read.table(file.choose(), header = TRUE, sep = "\t")
library(readxl)
dataset <- read_excel(NULL)
View(dataset)
View(nhlcanad1)
names(nhlcanad)
nhlcanadcsv = read.csv(file.choose(), header = TRUE)
nhlcanadcsv = read.csv2(file.choose(), header = TRUE)
nhlcanadcsv = read.csv2(file.choose())
library(readxl)
Canadiens <- read_excel("C:/Users/bera1923/Desktop/Présentation Beamer (Intro à R)/Capsule 2/Canadiens.xlsx")
View(Canadiens)
nhlcanadtextbn <- read.table(file.choose(), header = TRUE, sep = "\t")
nhlcanadtextbn <- read.table(file.choose(), header = TRUE)
is.data.frame(nhlcanadtextbn)
head(nhlcanadtextbn)
View(nhlcanadtextbn)
View(nhlcanadtextbn)
nhlcanadtextbnpv <- read.table(file.choose(), header = TRUE, sep = ";")
View(nhlcanadtextbnpv)
####################################
#####Importation Texte de Excel#####
####################################
nhlcanad <- read.table(file.choose(), header = TRUE, sep = "\t")
nhlcanadcsv <- read_excel("C:/Users/bera1923/Desktop/Présentation Beamer (Intro à R)/Capsule 2/CanadiensC1.xlsx")
View(nhlcanadcsv)
nhlcanadcsv1 <- read_excel("C:/Users/bera1923/Desktop/Présentation Beamer (Intro à R)/Capsule 2/Canadiens.xlsx")
View(nhlcanadcsv1)
View(nhlcanadcsv)
View(nhlcanadcsv1)
View(nhlcanadcsv)
View(nhlcanadcsv1)
View(nhlcanadcsv)
View(nhlcanadcsv1)
nhlcanadcsv <- read_excel("C:/Users/bera1923/Desktop/Présentation Beamer (Intro à R)/Capsule 2/CanadiensC1.xlsx")
View(nhlcanadcsv)
library(readxl)
canad <- read_excel("C:/Users/bera1923/Desktop/Présentation Beamer (Intro à R)/Capsule 2/Canadiens.xlsx")
View(canad)
(1/365)*(1/365)
(1/365)*(1/365) * 12
(1/365)*(1/365) * 6
(1/365)*(1/364) * 12
(1/365)*(1/364) * 6
7!
factorial(7)
factorial(7)/(24*6)
factorial(7)/(120*2)
factorial(4)/(2*2)
6 * (1/365)^2 * (364/365)^2
6 * (1/365)^2 * (364/365)^2 * 100000
6 * (1/365)^2 * (364/365)^5 * 100000
0.0000075*365
1.6*10^(-4)
6 * (1/365)^2 * (364/365)^2 / 4
6 * (1/365)^2 * (364/365)^2 / 5
6 * (1/365)^2 * (364/365)^2 / 3
6 * (1/365)^2 * (364/365)^2 / 2
4.47*10^(-5)
4.47*10^(-5)*2
4.47*10^(-5)*4
6 * ((1/365)^2) * ((364/365)^5)
21 * ((1/365)^2) * ((364/365)^5)
6 * ((1/365)^2) * ((364/365)^2)
NbOrange_1 <- 49
NbOrange_2 <- 0
while (NbOrange_1 > 0) {
NbOrange_1 <- NbOrange_1 - 1
NbOrange_2 <- NbOrange_2 + 1
}
NbOrange_1 <- 48
NbOrange_2 <- 0
for (numero_orange in 1:48){
NbOrange_1 <- NbOrange_1 - 1
NbOrange_2 <- NbOrange_2 + 1
}
NbOrange_1 <- 48
NbOrange_2 <- 0
for (nombre_interaction in 1:(NbOrange_1/2)){
NbOrange_1 <- NbOrange_1 - 2
NbOrange_2 <- NbOrange_2 + 2
}
runif(6, min = 0, max = 6)
valeurs <- 1:6
valeurs <- 1:6
nb_lancer <- 1
if(sample(valeurs,1) = 6)
if(sample(valeurs,1) == 6)
print(paste0("J'ai réussi en ", nb_lancer, "lancers"))
sample(valeurs,1)
print(paste0("J'ai réussi en ", nb_lancer, " lancers"))
if(sample(valeurs,1) == 6)
print(paste0("J'ai réussi en ", nb_lancer, " lancers"))
valeurs <- 1:6
nb_lancer <- 1
while (result != 6) {
result <- sample(valeurs,1)
nb_lancer <- nb_lancer + 1
}
valeurs <- 1:6
nb_lancer <- 1
result <- sample(valeurs,1)
while (result != 6) {
result <- sample(valeurs,1)
nb_lancer <- nb_lancer + 1
}
valeurs <- 1:6
nb_lancer <- 1
result <- sample(valeurs,1)
while (result != 6) {
result <- sample(valeurs,1)
nb_lancer <- nb_lancer + 1
}
if(nb_lancer == 1){
print(paste0("J'ai réussi en ", nb_lancer, " lancer seulement!"))
} else{
print(paste0("Ça ma pris", nb_lancer, "au total."))
}
valeurs <- 1:6
nb_lancer <- 1
result <- sample(valeurs,1)
while (result != 6) {
result <- sample(valeurs,1)
nb_lancer <- nb_lancer + 1
}
if(nb_lancer == 1){
print(paste0("J'ai réussi en ", nb_lancer, " lancer seulement!"))
} else{
print(paste0("Ça ma pris", nb_lancer, "au total."))
}
valeurs <- 1:6
nb_lancer <- 1
result <- sample(valeurs,1)
while (result != 6) {
result <- sample(valeurs,1)
nb_lancer <- nb_lancer + 1
}
if(nb_lancer == 1){
print(paste0("J'ai réussi en ", nb_lancer, " lancer seulement!"))
} else{
print(paste0("Ça ma pris ", nb_lancer, " lancers au total."))
}
valeurs <- 1:6
nb_lancer <- 1
result <- sample(valeurs,1)
while (result != 6) {
result <- sample(valeurs,1)
nb_lancer <- nb_lancer + 1
}
if(nb_lancer == 1){
print(paste0("Je suis un maître lanceur!"))
} else{
print(paste0("Le dé est forcement truqué..."))
}
if(nb_lancer == 1){
print(paste0("Je suis chanceux!"))
} else if(nb_lancer > 6){
print(paste0("Je suis extrêmement mal chanceux..."))
} else
print(paste0("Je suis mal chanceux."))
if(nb_lancer == 1){
print(paste0("Je suis chanceux!"))
} else if(nb_lancer > 6){
print(paste0("Je suis extrêmement mal chanceux..."))
} else{
print(paste0("Je suis mal chanceux."))
}
valeurs <- 1:6
nb_lancer <- 1
result <- sample(valeurs,1)
while (result != 6) {
result <- sample(valeurs,1)
nb_lancer <- nb_lancer + 1
}
if(nb_lancer == 1){
print(paste0("Je suis chanceux!"))
} else if(nb_lancer > 6){
print(paste0("Je suis extrêmement mal chanceux..."))
} else{
print(paste0("Je suis mal chanceux."))
}
Après quelques essais infructueux, Thomas se ravise. Il préférerait indiquer à ses amis qu'il a été chanceux si 1 seul lancer fut nécessaire, qu'il n'est pas chanceux lorsque le nombre de lancers fut entre 2 et 6, et qu'il est extrêmement mal chanceux de l'avoir obtenu en plus de 6 lancers.
party <- read.table(file = 'C:/Users/bera1923/Desktop/Ateliers_ALEA/Atelier_2/donnees/party.csv', sep=";", header = TRUE)
View(party)
party <- read.table(file = 'C:/Users/bera1923/Desktop/Ateliers_ALEA/Atelier_2/donnees/party.csv', sep=";", header = TRUE)
party
Enf_total <- apply(party, 2, sum)
party <- read.table(file = 'C:/Users/bera1923/Desktop/Ateliers_ALEA/Atelier_2/donnees/party.csv', sep=";", header = TRUE, row.names = 1)
Enf_total <- apply(party, 2, sum)
View(party)
party <- read.table(file = 'C:/Users/bera1923/Desktop/Ateliers_ALEA/Atelier_2/donnees/party.csv', sep=";", header = TRUE)
View(party)
party <- read.table(file = 'C:/Users/bera1923/Desktop/Ateliers_ALEA/Atelier_2/donnees/party.csv', sep=";", header = TRUE, row.names = 1)
Enf_total <- apply(party, 2, sum)
sum(Enf_total)
Enf_moyen_col <- apply(party, 2, mean)
Enf_sd_col <- apply(party, 2, sd)
Enf_cv <- (Enf_moyen_col/Enf_sd_col)
Enf_cv <- (Enf_sd_col/Enf_moyen_col)
Enf_total_col
Enf_total_col <- apply(party, 2, sum)
Enf_total_col
Enf_total
Enf_total <- sum(Enf_total_col)
Enf_total
Enf_moyen_col
Enf_sd_col
Enf_cv
Enf_total_lig <- apply(party, 1, sum)
party_rel_crou <- party/Enf_total_lig
party_rel_crou
round(party_rel_crou, 2)
2^4
2^4 * sqrt(1/3)
2^2 * sqrt(1/3)
round(2.309401)
log(57, base = 2)
2^5.83289
log(57, base = 2)
exp(log(3.7))
2^2 * sqrt(1/3)
res_A <- log(57, base = 2)
res_B <- exp(log(3.7))
res_C <- 2^2 * sqrt(1/3)
nouv_res_A <- round(res_A)
nouv_res_B <- floor(res_B)
nouv_res_C <- ceiling(res_C)
res_A <- log(57, base = 2)
res_B <- exp(log(4.1))
res_C <- 2^2 * sqrt(1/3)
nouv_res_A <- round(res_A)
nouv_res_B <- floor(res_B)
nouv_res_C <- ceiling(res_C)
enfants <- c(nouv_res_A,nouv_res_B,nouv_res_C)
max(enfants)
montant <- c(10000,12000,11500)
cout_vie <- c(10000,12000,11500)
montant <- enfants * cout_vie
ma_fonction <- function(x,y){
x*y
}
ma_fonction(2,3)
ma_fonction <- function(x,y){
result <- x*y
}
ma_fonction(2,3)
ma_fonction <- function(x,y){
result <- x*y
return(result)
}
ma_fonction(2,3)
ma_fonction(343,53)
?rnorm
concentration_carb <- function(m,V){
M <- 12.011
n <- m/M
C <- n/V
}
concen_carb <- function(m,V){
M <- 12.011
n <- m/M
C <- n/V
}
concen_carb <- function(m,V){
M <- 12.011
n <- m/M
C <- n/V
}
concen_carb <- function(m,V){
M <- 12.011
n <- m/M
C <- n/V
return(C)
}
concen_carb(1,5)
tab_Roger <- matrix(, nrow = 365, ncol = 3)
tab_Roger <- matrix(NA, nrow = 365, ncol = 3)
for (i in 1:365) {
tab_Roger[i,1] <- runif(1, min = 0.1, max = 1)
tab_Roger[i,2] <- runif(1, min = 0.8, max = 5)
tab_Roger[i,3] <- runif(1, min = 4, max = 6)
}
View(tab_Roger)
for (i in 1:365) {
tab_Roger[i,1] <- rnorm(1, mean = 0.5, sd = 0.2)
tab_Roger[i,2] <- rnorm(1, mean = 3, sd = 0.5)
tab_Roger[i,3] <- rnorm(1, mean = 3.95, sd = 0.2)
}
View(tab_Roger)
min(tab_Roger[,1])
for (i in 1:365) {
tab_Roger[i,1] <- rnorm(1, mean = 0.5, sd = 0.1)
tab_Roger[i,2] <- rnorm(1, mean = 3, sd = 0.5)
tab_Roger[i,3] <- rnorm(1, mean = 3.95, sd = 0.2)
}
min(tab_Roger[,1])
for (i in 1:365) {
tab_Roger[i,1] <- rnorm(1, mean = 0.5, sd = 0.15)
tab_Roger[i,2] <- rnorm(1, mean = 3, sd = 0.5)
tab_Roger[i,3] <- rnorm(1, mean = 3.95, sd = 0.2)
}
min(tab_Roger[,1])
for (i in 1:365) {
tab_Roger[i,1] <- rnorm(1, mean = 0.5, sd = 0.15)
tab_Roger[i,2] <- rnorm(1, mean = 3, sd = 0.5)
tab_Roger[i,3] <- rnorm(1, mean = 3.95, sd = 0.2)
}
min(tab_Roger[,1])
for (i in 1:365) {
tab_Roger[i,1] <- rnorm(1, mean = 0.5, sd = 0.15)
tab_Roger[i,2] <- rnorm(1, mean = 3, sd = 0.5)
tab_Roger[i,3] <- rnorm(1, mean = 3.95, sd = 0.2)
}
min(tab_Roger[,1])
write.table(tab_Roger, file = "./donnees/chimie.csv", sep = ";", row.names = F)
setwd("C:/Users/bera1923/Desktop/Ateliers_ALEA/Atelier_2")
write.table(tab_Roger, file = "./donnees/chimie.csv", sep = ";", row.names = F)
colnames(tab_Roger) <- c("gramme de carbone", "Volume de la solution", "pH de la solution")
write.table(tab_Roger, file = "./donnees/chimie.csv", sep = ";", row.names = F)
View(tab_Roger)
write.table(tab_Roger, file = "./donnees/chimie.csv", sep = ";", row.names = F)
round(tab_Roger,3)
colnames(tab_Roger) <- c("gramme de carbone", "Volume de la solution", "pH de la solution")
write.table(tab_Roger, file = "./donnees/chimie.csv", sep = ";", row.names = F)
write.table(tab_Roger, file = "./donnees/chimie.xlsx", sep = ";", row.names = F)
tab_Roger <- round(tab_Roger,3)
colnames(tab_Roger) <- c("gramme de carbone", "Volume de la solution", "pH de la solution")
write.table(tab_Roger, file = "./donnees/chimie.csv", sep = ";", row.names = F)
write.table(tab_Roger, file = "./donnees/chimie.csv", sep = ";", row.names = F)
write.table(tab_Roger, file = "./donnees/chimie.txt", sep = ";", row.names = F)
tab <- read.table(file = 'C:/Users/bera1923/Desktop/Ateliers_ALEA/Atelier_2/donnees/chimie.csv', sep=";", header = TRUE, row.names = 1)
tab <- read.table(file = 'C:/Users/bera1923/Desktop/Ateliers_ALEA/Atelier_2/donnees/chimie.csv', sep=";", header = TRUE)
View(tab)
concen_carb <- function(m,V){
M <- 12.011
n <- m/M
C <- n/V
return(C)
}
concen_carb(tab[,1],tab[,2])
result <- concen_carb(tab[,1],tab[,2])
mean(result)
concen_carb(0.5,4)
