```{r}
seq(from = 1, to = 10, by = 0.5)
rep(c(1:3), times = 3)
```
---
# Différents outils pour générer des données
```{r}
v1 <- c(1:3)
v2 <- c("A","B","C")
expand.grid(v1,v2)
```
---
# Combiner des objets
```{r}
rbind(v1,v2)
cbind(v1,v2)
```
---
# Fonctions utiles: trier des objets
```{r}
tri <- runif(n = 10, min = 0, max = 100)
tri
sort(tri)
```
---
# Fonctions utiles: obtenir des rangs
```{r}
rang <- runif(n = 10, min = 0, max = 100)
rang
rank(rang)
```
---
# Fonctions utiles: éch. les valeurs uniques
```{r}
uq <- c(1,2,5,7,4,3,2,1,10,5,8)
uq
unique(uq)
```
---
# Sous-échantillonner des objets
Parfois, on souhaite avoir seulement une partie des données contenues dans un objet. La fonction `subset()` est fort pratique pour réaliser cette opération.
Ici par exemple, on souhaite étudier seulement les joueurs de centre ayant fait au moins un but en désavantage numérique:
```{r}
NHL <- read.table(file="donnees/NHL.csv", header=TRUE, stringsAsFactors=FALSE, sep = ";")
sub_Centres <- subset(NHL, NHL$pos == "C" & NHL$Shpoints >= 1)
head(sub_Centres, n=2)
```
Le "==" est utilisé pour sélectionner les individus qui sont des joueurs de centre et le symbole "&" pour combiner deux conditions.
---
# Exercice
Le fichier [NHL_Complet.csv](./donnees/NHL_Complet.csv) est un sommaire de données individuelles d'environ 100 joueurs de la ligne nationale de hockey. On s'intéresse à connaitre la position jouée par ces joueurs en prenant en compte la division de leur équipe.
1. Charger les données "NHL_Complet".
2. Partitionner les données en fonction des divisions.
3. Pour chacune des divisions, calculer le nombre de joueurs jouant à chacune des positions.
4. Enregistrer les résultats dans un tableau où les étiquettes de rangées sont les divisions et les étiquettes des colonnes sont les positions.
On vous demande de rédiger un script qui réalisera l'ensemble de ces étapes, de la lecture des données à l'enregistrement du tableau final.
install.packages("xaringan")
library(xaringan)
head(parties)
parties <- read.table(file = './donnees/parties.txt', sep="\t", header = TRUE)
head(parties)
ButsResult <- table(parties$but.pour,parties$resultats)
View(parties)
ButsResult <- table(parties$But.pour,parties$Resultats)
parties
parties$Buts.pour
table(parties$Buts.pour,parties$Resultat)
ButsResult <- table(parties$Buts.pour,parties$Resultat)
head(ButsResult)
round(cor(ButsResult),6)
plot(ButsResult)
plot(cor(ButsResult))
ButsResult
plot(ButsResult)
n_t = 7000
lambda = 0.2
for t in 1:100
n_t = n_t * lambda
print n_t
let = ["R","S","T","U","D","I","O"]
let = c("R","S","T","U","D","I","O")
let[3]
let = c("Rally","S","T","U","Dodo","I","O")
let[3]
let[1]
let[5]
let
x <- c(1,7,5,3,9)
is.unsorted(x)
while (is.unsorted(x) = TRUE) {
for pos in 1:4
if{ x_temp[pos] > x_temp[pos+1]
x_temp[pos] <- x[pos+1]
x_temps[pos+1] <- x[pos]
}
x <- x_temp
}
x_temp <- c(1,7,5,3,9)
while (is.unsorted(x) = TRUE) {
for pos in 1:4
if{ x_temp[pos] > x_temp[pos+1]
x_temp[pos] <- x[pos+1]
x_temps[pos+1] <- x[pos]
}
x <- x_temp
}
while (is.unsorted(x) = TRUE) {
for pos in 1:4
if{ x_temp[pos] > x_temp[pos+1]
x_temp[pos] <- x[pos+1]
x_temps[pos+1] <- x[pos]
}
x <- x_temp
}
while (is.unsorted(x) = TRUE) {
for (pos in 1:4)
if{ x_temp[pos] > x_temp[pos+1]
x_temp[pos] <- x[pos+1]
x_temps[pos+1] <- x[pos]
}
x <- x_temp
}
while (is.unsorted(x) = TRUE) {
for (pos in 1:4)
if (x_temp[pos] > x_temp[pos+1]){
x_temp[pos] <- x[pos+1]
x_temps[pos+1] <- x[pos]
}
x <- x_temp
}
x_temp <- c(1,7,5,3,9)
x <- c(1,7,5,3,9)
while (is.unsorted(x) = TRUE) {
for (pos in 1:4)
if (x_temp[pos] > x_temp[pos+1]){
x_temp[pos] <- x[pos+1]
x_temp[pos+1] <- x[pos]
}
x <- x_temp
}
while (is.unsorted(x) = TRUE) {
{for (pos in 1:4)
if (x_temp[pos] > x_temp[pos+1]){
x_temp[pos] <- x[pos+1]
x_temp[pos+1] <- x[pos]
}
}
x <- x_temp
}
x_temp <- c(1,7,5,3,9)
x <- c(1,7,5,3,9)
while (is.unsorted(x) = TRUE) {
{for (pos in 1:4)
if (x_temp[pos] > x_temp[pos+1]){
x_temp[pos] <- x[pos+1]
x_temp[pos+1] <- x[pos]
}
}
x <- x_temp
}
x_temp <- c(1,7,5,9.3)
x_temp <- c(1,7,5,9,3)
x <- x_temp
x_temp[1] > x_temp[2]
x_temp <- c(1,7,5,9,3)
x <- x_temp
while (is.unsorted(x) == TRUE) {
{for (pos in 1:4)
if (x_temp[pos] > x_temp[pos+1]){
x_temp[pos] <- x[pos+1]
x_temp[pos+1] <- x[pos]
}
}
x <- x_temp
}
length(x_temp)
x_temp <- c(1,7,5,9,3)
x <- x_temp
length(x_temp)
x_temp <- c(1,7,5,9,3)
x <- x_temp
while (is.unsorted(x) == TRUE) {
if (x_temp[pos] > x_temp[pos+1]){
x_temp[pos] <- x[pos+1]
x_temp[pos+1] <- x[pos]
}
{for (pos in 1:(length(x)-1)
if (x_temp[pos] > x_temp[pos+1]){
x_temp[pos] <- x[pos+1]
x_temp[pos+1] <- x[pos]
}
}
x <- x_temp
}
x_temp <- c(1,7,5,9,3)
x <- x_temp
while (is.unsorted(x) == TRUE) {
while (is.unsorted(x) == TRUE) {
if (x_temp[pos] > x_temp[pos+1]){
x_temp[pos] <- x[pos+1]
x_temp[pos+1] <- x[pos]
}
x <- x_temp
{for (pos in 1:(length(x)-1)
if (x_temp[pos] > x_temp[pos+1]){
x_temp[pos] <- x[pos+1]
x_temp[pos+1] <- x[pos]
}
}
x <- x_temp
}
x_temp <- c(1,7,5,9,3)
x <- x_temp
while (is.unsorted(x) == TRUE) {
if (x_temp[pos] > x_temp[pos+1]){
x_temp[pos] <- x[pos+1]
x_temp[pos+1] <- x[pos]
}
{for (pos in seq(1,length(x)-1)
if (x_temp[pos] > x_temp[pos+1]){
x_temp[pos] <- x[pos+1]
x_temp[pos+1] <- x[pos]
}
}
x <- x_temp
}
while (is.unsorted(x) == TRUE) {
{for (pos in seq(1,length(x)-1)
if (x_temp[pos] > x_temp[pos+1]){
x_temp[pos] <- x[pos+1]
x_temp[pos+1] <- x[pos]
}
}
x <- x_temp
}
x_temp <- c(1,7,5,9,3)
x <- x_temp
while (is.unsorted(x) == TRUE) {
{for (pos in seq(1,length(x)-1)
if (x_temp[pos] > x_temp[pos+1]){
x_temp[pos] <- x[pos+1]
x_temp[pos+1] <- x[pos]
}
}
x <- x_temp
}
x_temp <- c(1,7,5,9,3)
x <- x_temp
while (is.unsorted(x) == TRUE) {
{for (pos in seq(1,length(x)-1))
if (x_temp[pos] > x_temp[pos+1]){
x_temp[pos] <- x[pos+1]
x_temp[pos+1] <- x[pos]
}
}
x <- x_temp
}
x_temp <- c(1,7,5,9,3,22,27,6,4,8)
x <- x_temp
while (is.unsorted(x) == TRUE) {
{for (pos in seq(1,length(x)-1))
if (x_temp[pos] > x_temp[pos+1]){
x_temp[pos] <- x[pos+1]
x_temp[pos+1] <- x[pos]
}
}
x <- x_temp
}
x_temp <- c(1,7,5,9,3,22,27,6,4,8)
x <- x_temp
while (is.unsorted(x) == TRUE) {
{for (pos in seq(1,length(x)-1))
if (x_temp[pos] > x_temp[pos+1]){
x_temp[pos] <- x[pos+1]
x_temp[pos+1] <- x[pos]
}
}
x <- x_temp
}
x_temp <- c(1,7,5,9,3,22,27,6,4,8)
x <- x_temp
if (x_temp[pos] > x_temp[pos+1]){
x_temp[pos] <- x[pos+1]
x_temp[pos+1] <- x[pos]
}
pos = 1
if (x_temp[pos] > x_temp[pos+1]){
x_temp[pos] <- x[pos+1]
x_temp[pos+1] <- x[pos]
}
pos = 2
if (x_temp[pos] > x_temp[pos+1]){
x_temp[pos] <- x[pos+1]
x_temp[pos+1] <- x[pos]
}
pos = 3
if (x_temp[pos] > x_temp[pos+1]){
x_temp[pos] <- x[pos+1]
x_temp[pos+1] <- x[pos]
}
pos = 4
if (x_temp[pos] > x_temp[pos+1]){
x_temp[pos] <- x[pos+1]
x_temp[pos+1] <- x[pos]
}
pos = 5
if (x_temp[pos] > x_temp[pos+1]){
x_temp[pos] <- x[pos+1]
x_temp[pos+1] <- x[pos]
}
pos = 6
if (x_temp[pos] > x_temp[pos+1]){
x_temp[pos] <- x[pos+1]
x_temp[pos+1] <- x[pos]
}
pos = 7
if (x_temp[pos] > x_temp[pos+1]){
x_temp[pos] <- x[pos+1]
x_temp[pos+1] <- x[pos]
}
pos = 8
if (x_temp[pos] > x_temp[pos+1]){
x_temp[pos] <- x[pos+1]
x_temp[pos+1] <- x[pos]
}
x_temp <- c(1,7,5,9,3,22,27,6,4,8)
x <- x_temp
while (is.unsorted(x) == TRUE) {
{for (pos in seq(1,length(x)-1))
if (x_temp[pos] > x_temp[pos+1]){
x_temp[pos] <- x[pos+1]
x_temp[pos+1] <- x[pos]
x <- x_temp
}
}
}
x_temp <- c(1,7,5,9,3,22,27,6,4,8,22,33,1,4,5)
x <- x_temp
while (is.unsorted(x) == TRUE) {
{for (pos in seq(1,length(x)-1))
if (x_temp[pos] > x_temp[pos+1]){
x_temp[pos] <- x[pos+1]
x_temp[pos+1] <- x[pos]
x <- x_temp
}
}
}
x
sample(x)
x_temp <- c(1,7,5,9,3)
x <- x_temp
sample(x)
x_temp <- c(1,7,5,9,3)
x <- x_temp
k <- 0
while (is.unsorted(x) == TRUE) {
sample(x)
{for (pos in seq(1,length(x)-1))
if (x_temp[pos] > x_temp[pos+1]){
k <- k+1
}
}
}
x
sample(x)
x <- sample(x)
x <- sample(x)
x <- sample(x)
x_temp <- x
{for (pos in seq(1,length(x)-1))
if (x_temp[pos] > x_temp[pos+1]){
k <- k+1
}
}
while (is.unsorted(x) == TRUE) {
x <- sample(x)
x_temp <- x
{for (pos in seq(1,length(x)-1))
if (x_temp[pos] > x_temp[pos+1]){
k <- k+1
}
}
}
x
x_temp <- c(1,7,5,9,3)
x <- x_temp
k <- 0
while (is.unsorted(x) == TRUE) {
x <- sample(x)
x_temp <- x
{for (pos in seq(1,length(x)-1))
if (x_temp[pos] > x_temp[pos+1]){
k <- k+1
}
}
}
x_temp <- c(1,7,5,9,3)
x <- x_temp
k <- 0
while (is.unsorted(x) == TRUE) {
x <- sample(x)
x_temp <- x
{for (pos in seq(1,length(x)-1))
if (x_temp[pos] > x_temp[pos+1]){
k <- k+1
}
}
}
x_temp <- c(1,7,5,9,3,22,12,15,11,11,17,5,4,7)
x <- x_temp
k <- 0
while (is.unsorted(x) == TRUE) {
x <- sample(x)
x_temp <- x
{for (pos in seq(1,length(x)-1))
if (x_temp[pos] > x_temp[pos+1]){
k <- k+1
}
}
}
"A" > "B"
"A" < "B"
Le pseudo-code est souvent très utile pour répondre à ce commandement. Celui-ci agit à titre de résumer et nous permet de mieux séparer les différentes sections nécessaires dans la réalisation de notre script. N'oublions pas que de programmer, c'est avant tout résoudre des problèmes. De plus, si l'histoire nous a bien appris une chose, c'est bien qu'il vaut mieux diviser pour régner.
```{r}
dir()
10^(-6)
1e-02
a <- "test"
b <- 'test'
collage <- paste("a","b", sep="")
collage
collage <- paste("Antoine","est","bon", sep = "_")
collage
as.numeric("4","5")
as.numeric(c("4","5")
)
as.numeric(c("a","5"))
as.logical(0)
as.logical(3)
as.logical(0.1)
as.logical(0.00000000000001)
as.logical(-0.1)
matriceA <- (c(1,2,3,4,5,6), nrow = 2, ncol = 3)
matriceA <- matrix(c(1,2,3,4,5,6), nrow = 2, ncol = 3)
matriceA
length(matriceA)
?runif
a <- runif(10)
matrice <- matrix(a, nrow = 2, ncol = 5)
sum(matrice[,1])
matrice
MaListe = list()
MaListe[[1]] = c(1,2)
MaListe[[2]] = matrix(c("A","B","C","D"), nrow = 2, ncol = 2)
MaListe
MaListe[1]
MaListe[[1]]
MaListe[[1],1]
[MaListe[[1]],1]
names(MaListe) <- c("Vecteur","Matrice")
MaListe
MaListe$Vecteur[1]
MaListe[[1]][1]
matrix(c(1:6), nrow = 2, ncol = 3)
matrix(c(1,2,3,4,5,6), nrow = 2, ncol = 3)
NHL <- read.table(file = "donnees/Canadiens.csv", header = T, dec = ".", sep = ";")
head(NHL)
write.table(mat2, file = "mat.csv")
mat2 <- matrix(runif(n = 50,min = 0,max = 1),nrow = 5,ncol = 10)
write.table(mat2, file = "mat.csv")
mat2
a <- write.table(mat2, file = "mat.csv")
a
MaListe <- list()
MaListe[[1]] <- 1
MaListe[[2]] <- c(1:10)
save(test, file = "MaListe.Rdata")
test <- list()
test[[1]] <- 1
test[[2]] <- c(1:10)
save(test, file = "MaListe.Rdata")
save(test, file = "test.Rdata")
test2 <- list()
test[[1]] <- 8
test[[2]] <- c(11:15)
saveRDS(test, file = "test.Rdata")
test2 <- list()
test2[[1]] <- 8
test2[[2]] <- c(11:15)
saveRDS(test2, file = "test.Rdata")
load(test)
load(test.Rdata)
ls()
test <- list()
test[[1]] <- 1
test[[2]] <- c(1:10)
save(test, file = "test.Rdata")
test2 <- list()
test2[[1]] <- 8
test2[[2]] <- c(11:15)
saveRDS(test2, file = "test.Rdata")
load(test.Rdata)
ls()
test <- list()
test[[1]] <- 1
test[[2]] <- c(1:10)
save(test, file = "test.Rdata")
test2 <- list()
test2[[1]] <- 8
test2[[2]] <- c(11:15)
save(test2, file = "test.Rdata")
ls()
